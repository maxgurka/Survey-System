@using Tengella.Survey.Data.Models;
@using System.Text.RegularExpressions;
@model Survey
@{
	IEnumerable<Recipient> recipients = ViewData["Recipients"] as IEnumerable<Recipient>;
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>

<div class="d-flex justify-content-between mt-5">
	<div>
		<h1 class="display-6">@Model.Name</h1>
		<p class="lead text-muted">@Model.Description</p>
	</div>
	<div class="d-flex flex-column align-items-end mt-3 survey-info-div">
		<p class="mb-0">Number of respondents: @Model.Respondents.Count</p>
		<p>@Html.Raw(Model.EndDate.HasValue ? "End date: " + Model.EndDate.Value.ToString("dd/MM/yyyy") : "")</p>
	</div>
</div>


<!-- Send email form container -->
<div class="mb-3 mt-5">
	<div class="collapse question-container border background-theme-secondary pb-3" id="collapseForm">
		<!-- The form -->
		<form asp-controller="Survey" asp-action="Info" method="post" target="_blank" accept-charset="UTF-8">
			<div class="form-group">
				<div class="input-group">
					<!-- Input for greeting message -->
					<input type="text" name="Greeting" class="form-control" placeholder="Hello" />
					<div class="input-group-append">
						<!-- Dropdown with checkboxes for selecting recipients -->
						<button class="btn btn-primary dropdown-toggle" type="button" id="recipientDropdown"
								data-bs-toggle="dropdown" aria-expanded="false">
							Select Recipients
						</button>
						<!-- List of reciepients -->
						<ul class="dropdown-menu" aria-labelledby="recipientDropdown">
							@foreach (var recipient in recipients)
							{
								<li>
									<a class="dropdown-item" href="#">
										<div class="form-check">
											<input class="form-check-input" type="checkbox" name="RecipientIds" value="@recipient.Id" />
											<label class="form-check-label" for="RecipientIds">@recipient.Name</label>
										</div>
									</a>
								</li>
							}
						</ul>
					</div>
				</div>
			</div>
			<!-- Email message input -->
			<div class="form-group mt-2 mb-2">
				<textarea name="Message" rows="5" class="form-control" placeholder="Please take a moment to fill out our survey..."></textarea>
			</div>
			<!-- Making sure the back end has access to the survey link -->
			<input type="hidden" name="surveyLink" value="@($"{Context.Request.Scheme}://{Context.Request.Host}{Url.Action("Take", "Survey", new { id = Model.Id })}")" />
			<!-- Submit and preview buttons, and link to survey -->
			<div class="d-flex justify-content-between">
				<div>
					<button type="submit" class="btn btn-primary" name="submitType" value="preview">Send</button>
					<button type="submit" class="btn btn-primary" name="submitType" value="preview">Preview</button>
				</div>
				<a href="@Url.Action("Take", "Survey", new { id = Model.Id })">Link to survey</a>
			</div>
		</form>
	</div>

	<div class ="d-flex justify-content-between">
		
		<!-- Button for expanding/collapsing form -->
		<button class="btn collapseButton accent-theme-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseForm"
				aria-expanded="false" aria-controls="collapseForm">
			Send survey <i class="bi bi-chevron-up"></i>
		</button>
		@if (Model.Respondents.Count > 0)
		{
			<div class="btn-group" role="group" aria-label="Chart type">
				<button id="enable-bar-chart" type="button" class="btn btn-outline-primary active"><i class="bi bi-bar-chart-line-fill"></i></button>
				<button id="enable-doughnut-chart" type="button" class="btn btn-outline-primary"><i class="bi bi-pie-chart"></i></button>
			</div>
		}
	</div>
</div>


@if (Model.Respondents.Count > 0)
{
	<div id="masonry-container" class="row">
		@foreach (var question in Model.Questions)
		{
			<div class="col-md-6 masonry-item">
				@if (question.Answers.Any())
				{
					// Determine the height of the chart based on the number of alternatives
					string chartHeight = 100 + question.Answers.Count * 55 + "px";

					<div class="question-container border background-theme-secondary pb-4">
						<p class="lead mt-1"><strong>@question.Content</strong></p>
						<canvas id="bar_@question.Id" style="width: 100%; height: @chartHeight;"></canvas>
						<canvas id="doughnut_@question.Id" style="width: 100%; height: 400px;"></canvas>
					</div>

					// Getting the answer alternatives for this question
					List<string> answerAlternatives = question.Answers.Select(answer => answer.Content).ToList();
					string answerAlternativeArray = "[" + string.Join(",", answerAlternatives.Select(content => "\"" + content + "\"")) + "]";

					// How many times was each alternative picked?
					var answerIds = question.Answers.Select(answer => answer.Id).ToList();
					int[] counts = new int[answerIds.Count];

					@foreach (var respondent in Model.Respondents)
					{
						int responseId = int.Parse(respondent.Responses.First(r => r.QuestionId == question.Id).Content);

						if (answerIds.Contains(responseId))
						{
							int index = answerIds.IndexOf(responseId);
							counts[index]++;
						}
					}

					// Make sure the js files have access to the necessary data. Also put the canvas in the correct div
					<script>
						var passLabels = @Html.Raw(@answerAlternativeArray);
						var passData = @Json.Serialize(counts);
						var passId = @question.Id;
					</script>

					// Draw charts
					<script src="~/js/Visualizations/BarChart.js"></script>
					<script src="~/js/Visualizations/DoughnutChart.js"></script>
				}
				else
				{
					// Answers to free-text questions will just be placed in a list
					<div class="question-container border background-theme-secondary pb-4">
						<p class="lead mt-1"><strong>@question.Content</strong></p>
						<ul>
							@foreach (var respondent in Model.Respondents)
							{
								var response = respondent.Responses.FirstOrDefault(r => r.QuestionId == question.Id);
								if (response != null)
								{
									<li>@Html.DisplayFor(model => response.Content)</li>
								}
							}
						</ul>
					</div>
				}
			</div>
		}
	</div>
}
else
{
	<p>No respondents yet.</p>
}

@section Scripts{
	<script src="https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js"></script>
	<script>
		$(document).ready(function () {
			var masonryContainer = document.getElementById('masonry-container');
			var masonry = new Masonry(masonryContainer, {
				itemSelector: '.masonry-item',
				columnWidth: '.masonry-item',
				percentPosition: true
			});
		});
	</script>
	<script>
		// Hides doughnut charts by default
		const elements = $('[id^="' + "doughnut_" + '"]');
		elements.hide();

		// Toggle between doughnut and bar charts
		function toggleElementsStartingWith(namePrefix, enabled) {
			const elements = $('[id^="' + namePrefix + '"]');
			elements.each(function () {
				const element = $(this);
				if (enabled) {
					element.show(500, function () {
						clearInterval(animationInterval);
					});
				} else {
					element.hide(500, function () {
						clearInterval(animationInterval);
					});
				}
				var animationInterval = setInterval(function () {
					updateMasonryLayout();
				}, 25);
			});
		}

		// Updates the masonry to make sure it tiles correctly on changes
		function updateMasonryLayout() {
			var masonryContainer = document.getElementById('masonry-container');
			var masonry = new Masonry(masonryContainer, {
				itemSelector: '.masonry-item',
				columnWidth: '.masonry-item',
				percentPosition: true
			});

			// Layout Masonry items
			masonry.layout();
		}

		// Toggle between bar and doughnut charts
		$('#enable-bar-chart').on('click', function () {
			toggleElementsStartingWith('bar_', true);
			toggleElementsStartingWith('doughnut_', false);

			// Toggle active class and icon styles
			$('#enable-bar-chart').addClass('active');
			$('#enable-doughnut-chart').removeClass('active');

			// Remove focus to prevent highlighting
			$('#enable-bar-chart').blur();
		});

		$('#enable-doughnut-chart').on('click', function () {
			toggleElementsStartingWith('bar_', false);
			toggleElementsStartingWith('doughnut_', true);

			// Toggle active class and icon styles
			$('#enable-doughnut-chart').addClass('active');
			$('#enable-bar-chart').removeClass('active');

			// Remove focus to prevent highlighting
			$('#enable-doughnut-chart').blur();
		});

		// Switch arrow icon when expanding/collapsing
		$(".collapseButton").on("click", function () {
			$(this).find(".bi").toggleClass("bi-chevron-up bi-chevron-down");
		});
	</script>
}