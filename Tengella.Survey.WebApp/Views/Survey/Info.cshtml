@using Tengella.Survey.Data.Models;
@using System.Text.RegularExpressions;
@model Survey

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
<h1>@Model.Name</h1>
<h2>@Model.Description</h2>
<h2>Number of respondents: @Model.Respondents.Count</h2>
<a href="@Url.Action("Take", "Survey", new { id = Model.Id })">Link to survey</a>

<div class="form-check form-switch mb-3">
    <input class="form-check-input" type="checkbox" id="toggle-charts">
    <label class="form-check-label" for="toggle-charts">Chart type</label>
</div>

<div id="bar_container"></div>
<div id="doughnut_container"></div>

@foreach (var question in Model.Questions)
{
    <p class="lead mt-5"><strong>@question.Content</strong></p>
    @if (question.Answers.Any())
    {
        // Determine the height of the chart based on the number of alternatives
        string chartHeight = 100 + question.Answers.Count * 55 + "px";
        <canvas id="bar_@question.Id" style="width: 100%; height: @chartHeight;"></canvas>
        <canvas id="doughnut_@question.Id" style="width: 100%; height: 400px;"></canvas>

        
	    // Getting the answer alternatives for this question
	    List<string> answerAlternatives = question.Answers.Select(answer => answer.Content).ToList();
	    string answerAlternativeArray = "[" + string.Join(",", answerAlternatives.Select(content => "\"" + content + "\"")) + "]";

	    // How many times was each alternative picked?
	    var answerIds = question.Answers.Select(answer => answer.Id).ToList();
	    int[] counts = new int[answerIds.Count];

	    @foreach (var respondent in Model.Respondents)
	    {
		    int responseId = int.Parse(respondent.Responses.First(r => r.QuestionId == question.Id).Content);

		    if (answerIds.Contains(responseId))
		    {
			    int index = answerIds.IndexOf(responseId);
			    counts[index]++;
		    }
	    }

        // Make sure the js files have access to the necessary data. Also put the canvas in the correct div
        <script>
            var passLabels = @Html.Raw(@answerAlternativeArray);
            var passData = @Json.Serialize(counts);
            var passId = @question.Id;
        </script>

        // Draw charts
        <script src="~/js/Visualizations/BarChart.js"></script>
        <script src="~/js/Visualizations/DoughnutChart.js"></script>
    }
    else
    {
        <ul>
            @foreach (var respondent in Model.Respondents)
            {
                var response = respondent.Responses.FirstOrDefault(r => r.QuestionId == question.Id);
                if (response != null)
                {
                    <li>@Html.DisplayFor(model => response.Content)</li>
                }
            }
        </ul>
    }
}

@section Scripts{

    <script>

        // Hides doughnut charts by default
        const elements = $('[id^="' + "doughnut_" + '"]');
        elements.hide();

        // Toggle between doughnut and bar charts
        function toggleElementsStartingWith(namePrefix) {
            const elements = $('[id^="' + namePrefix + '"]');
            elements.each(function () {
                const element = $(this);
                if (element.is(':hidden')) {
                    element.show(500);
                } else {
                    element.hide(500);
                }
            });
        }

        // Toggle button
        $('#toggle-charts').on('click', function () {
            toggleElementsStartingWith('bar_');
            toggleElementsStartingWith('doughnut_');
        });
    </script>
}